[{"/Users/scbunn/src/omnifleet/webui/src/index.js":"1","/Users/scbunn/src/omnifleet/webui/src/app/App.jsx":"2","/Users/scbunn/src/omnifleet/webui/src/features/sandbox/Sandbox.jsx":"3","/Users/scbunn/src/omnifleet/webui/src/features/navigation/NavBar.jsx":"4","/Users/scbunn/src/omnifleet/webui/src/features/landing/LandingPage.jsx":"5","/Users/scbunn/src/omnifleet/webui/src/app/api/sampleTelemetry.js":"6","/Users/scbunn/src/omnifleet/webui/src/features/navigation/Sidebar.jsx":"7","/Users/scbunn/src/omnifleet/webui/src/features/fleet/FleetList.jsx":"8","/Users/scbunn/src/omnifleet/webui/src/features/fleet/FleetTracker.jsx":"9","/Users/scbunn/src/omnifleet/webui/src/features/health/ServicHealthList.jsx":"10","/Users/scbunn/src/omnifleet/webui/src/features/health/ServiceHealth.jsx":"11"},{"size":401,"mtime":1608409155866,"results":"12","hashOfConfig":"13"},{"size":800,"mtime":1608574511438,"results":"14","hashOfConfig":"13"},{"size":734,"mtime":1608409155866,"results":"15","hashOfConfig":"13"},{"size":493,"mtime":1608409155866,"results":"16","hashOfConfig":"13"},{"size":1320,"mtime":1608582919781,"results":"17","hashOfConfig":"13"},{"size":379,"mtime":1608409155864,"results":"18","hashOfConfig":"13"},{"size":888,"mtime":1608573997188,"results":"19","hashOfConfig":"13"},{"size":709,"mtime":1608409155865,"results":"20","hashOfConfig":"13"},{"size":3054,"mtime":1608409155865,"results":"21","hashOfConfig":"13"},{"size":653,"mtime":1608583033161,"results":"22","hashOfConfig":"13"},{"size":1498,"mtime":1608582906535,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"apt8n6",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/scbunn/src/omnifleet/webui/src/index.js",[],["48","49"],"/Users/scbunn/src/omnifleet/webui/src/app/App.jsx",[],"/Users/scbunn/src/omnifleet/webui/src/features/sandbox/Sandbox.jsx",[],"/Users/scbunn/src/omnifleet/webui/src/features/navigation/NavBar.jsx",[],"/Users/scbunn/src/omnifleet/webui/src/features/landing/LandingPage.jsx",[],"/Users/scbunn/src/omnifleet/webui/src/app/api/sampleTelemetry.js",[],"/Users/scbunn/src/omnifleet/webui/src/features/navigation/Sidebar.jsx",[],"/Users/scbunn/src/omnifleet/webui/src/features/fleet/FleetList.jsx",[],"/Users/scbunn/src/omnifleet/webui/src/features/fleet/FleetTracker.jsx",[],"/Users/scbunn/src/omnifleet/webui/src/features/health/ServicHealthList.jsx",["50"],"import React, { useState } from \"react\";\nimport { List } from \"semantic-ui-react\";\nimport ServiceHealth from \"./ServiceHealth\";\n\nexport default function ServiceHealthList({ apiGateway }) {\n  const GPSTrackingService = new URL(apiGateway + \"/tracking/health/readiness\");\n  const [services, setServices] = useState([\n    {\n      name: \"GPS Tracking Service\",\n      url: GPSTrackingService,\n    },\n  ]);\n\n  return (\n    <List divided relaxed>\n      {services.map((service) => (\n        <ServiceHealth\n          url={service.url}\n          name={service.name}\n          frequency='10000'\n          key={service.name}\n        />\n      ))}\n    </List>\n  );\n}\n","/Users/scbunn/src/omnifleet/webui/src/features/health/ServiceHealth.jsx",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":7,"column":20,"nodeType":"57","messageId":"58","endLine":7,"endColumn":31},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'setServices' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]